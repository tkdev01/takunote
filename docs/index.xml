<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Taku Note</title>
    <link>https://tkdev01.github.io/takunote/</link>
    <description>Recent content on Taku Note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 19 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://tkdev01.github.io/takunote/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DockerにNuxt.js環境構築</title>
      <link>https://tkdev01.github.io/takunote/blog/nuxt-docker/</link>
      <pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tkdev01.github.io/takunote/blog/nuxt-docker/</guid>
      <description>自分の環境を汚すことなく、DockerでNuxt.jsの環境を構築します。
環境
 Mac Mojave 10.14.6 Docker version 19.03.1, build 74b1e89 docker-compose version 1.24.1, build 4667896b  最終的なディレクトリ構成
Root ├── docker-compose.yml └── web ├── Dockerfile └── app ├── Nuxt.jsのソース ├── ...  準備 - Docker For Macのインストール こちらから Docker For Macのインストール
※インストール方法に関してはドキュメントを参照ください。
Docker For Macをインストール後、「Docker is Running」となれば準備完了
作業ディレクトリを作成 $ mkdir -p [プロジェクト名]/web/app $ cd [プロジェクト名]/web  Dockerfileの作成 Docker上で動作させるコンテナの構成情報を記述するためのファイルを作成します。
$ vim Dockerfile -- 下記を記載 FROM node:10.11.0-alpine RUN apk update &amp;amp;&amp;amp; \ apk add git &amp;amp;&amp;amp; \ npm install -g npm &amp;amp;&amp;amp; \ npm install -g @vue/cli &amp;amp;&amp;amp; \ npm install -g nuxt &amp;amp;&amp;amp; \ npm install -g create-nuxt-app ENV HOST 0.</description>
    </item>
    
    <item>
      <title>VirtualBox 仮想ディスクの圧縮</title>
      <link>https://tkdev01.github.io/takunote/blog/vm/</link>
      <pubDate>Tue, 09 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tkdev01.github.io/takunote/blog/vm/</guid>
      <description>VirtualBox：仮想ディスクの圧縮(vmdkファイル圧縮したい方向け) Vagrant+VirtualBox(Winsows10)の使用で仮想ディスクのサイズが膨れ上がってきたので、 ダイエット開始。
流れ 【ゲストOS側】
1. ディスククリーンアップ
2. ドライブの空き領域を0埋め
【ホストOS側】
ファイル形式がVDIの場合
1. VBoxManageコマンドで仮想ドライブの圧縮
ファイル形式がVMDKの場合 1. vmdkをvdiに変換
2. vdiファイル圧縮
3. 圧縮されたvdiファイルをvmdkに変換
4. 設定
5. 既存ファイルの削除
注意 スナップショットを撮っている場合はこの方法はあまり効果がありません。 可能であればスナップショットを削除することをおすすめします。
参考：VirtualBoxのスナップショット使用時は肥大化するディスク容量に気をつけられたし
【ゲストOS作業】  ディスククリーンアップを利用する。
参考：WindowWindowsのディスククリーンアップの使い方
 SDeleteのダウンロード(Linuxの場合は不要　ddコマンド使用)
OSがファイルを削除する場合、実際にはファイルのインデックス情報を削除するだけで、 ファイル自体は削除されないそうです。SDeleteツールを用いれば、仮想ディスクの空き領域を0埋めすることができます。
SDelete
 zipファイルを展開し、そのディレクトリでコマンドプロンプトを開き、以下コマンドを入力
結構時間がかかります。(´・ω・｀)
  #Cドライブの空き領域を0埋めする ＃x86 sdelete.exe -z C: ＃x64 sdelete64.exe -z C: #linux ddコマンド使用 $ dd if=/dev/zero of=zero bs=4k; \rm zero  完了したら、仮想OSのシャットダウン。 ホストOS作業手順を実行する。
【ホストOS作業】 以下の圧縮作業にはVBoxManageコマンドを使用します。 1. 圧縮する仮想ドライブのUUID取得
「C:\Program Files\Oracle\VirtualBox」でコマンドプロンプトを開き、以下のコマンドを入力。</description>
    </item>
    
    <item>
      <title>Fancy App 1</title>
      <link>https://tkdev01.github.io/takunote/itemized/item1/</link>
      <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tkdev01.github.io/takunote/itemized/item1/</guid>
      <description> App 1 </description>
    </item>
    
    <item>
      <title>Fancy App 2</title>
      <link>https://tkdev01.github.io/takunote/itemized/item2/</link>
      <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tkdev01.github.io/takunote/itemized/item2/</guid>
      <description> App 2 </description>
    </item>
    
    <item>
      <title>Fancy App 3</title>
      <link>https://tkdev01.github.io/takunote/itemized/item3/</link>
      <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tkdev01.github.io/takunote/itemized/item3/</guid>
      <description> App 3 </description>
    </item>
    
    <item>
      <title>Fancy App 4</title>
      <link>https://tkdev01.github.io/takunote/itemized/item4/</link>
      <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tkdev01.github.io/takunote/itemized/item4/</guid>
      <description> App 4 </description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://tkdev01.github.io/takunote/blog/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tkdev01.github.io/takunote/blog/goisforlovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://tkdev01.github.io/takunote/blog/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tkdev01.github.io/takunote/blog/hugoisforlovers/</guid>
      <description>&lt;h2 id=&#34;step-1-install-hugo&#34;&gt;Step 1. Install Hugo&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;hugo releases&lt;/a&gt; and download the
appropriate version for your os and architecture.&lt;/p&gt;

&lt;p&gt;Save it somewhere specific as we will be using it in the next step.&lt;/p&gt;

&lt;p&gt;More complete instructions are available at &lt;a href=&#34;https://tkdev01.github.io/takunote/overview/installing/&#34;&gt;installing hugo&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://tkdev01.github.io/takunote/blog/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tkdev01.github.io/takunote/blog/migrate-from-jekyll/</guid>
      <description>&lt;h2 id=&#34;move-static-content-to-static&#34;&gt;Move static content to &lt;code&gt;static&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Jekyll has a rule that any directory not starting with &lt;code&gt;_&lt;/code&gt; will be copied as-is to the &lt;code&gt;_site&lt;/code&gt; output. Hugo keeps all static content under &lt;code&gt;static&lt;/code&gt;. You should therefore move it all there.
With Jekyll, something that looked like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ images/
        logo.png
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>